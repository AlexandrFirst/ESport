{"version":3,"file":"main.js","mappings":";;;;;;;AAAA;;;;;;ACAA;;;;;;;;;;ACAA,wCAAwC;AACxC,wCAA8C;AAC9C,4CAAuC;AAEvC,4CAAmD;AACnD,yDAA+E;AAYxE,IAAM,SAAS,uBAAf,MAAM,SAAS;CAAG;oBAAZ,SAAS;IAVrB,mBAAM,EAAC;QACN,OAAO,EAAE;YACP,qBAAY,CAAC,OAAO,CAAC;gBACnB,QAAQ,EAAE,IAAI;aACf,CAAC;YACF,sBAAS,CAAC,YAAY,CAAC,6BAAY,GAAE,CAAC;SACvC;QACD,WAAW,EAAE,CAAC,gDAAsB,CAAC;QACrC,SAAS,EAAE,EAAE;KACd,CAAC;GACW,SAAS,CAAG;;;;;;;ACjBzB;;;;;;ACAA;;;;;;ACAA;;;;;;;;;ACAA,wCAA6D;AAGtD,MAAM,YAAY,GAAG,GAA4B,EAAE,CAAC,CAAC;IAC1D,MAAM,EAAE,CAAC,sBAAa,CAAC;IACvB,OAAO,EAAE,CAAC,qBAAY,CAAC;IACvB,UAAU,EAAE,aAAa;CAC1B,CAAC,CAAC;AAJU,oBAAY,gBAItB;AAEH,MAAM,aAAa,GAAG,KAAK,EACzB,aAA4B,EACC,EAAE;IAC/B,OAAO;QACL,YAAY,EAAE,aAAa,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,EAAE;QACtD,WAAW,EAAE;YACX;gBACE,KAAK,EAAE,aAAa,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,EAAE;gBAC5C,QAAQ,EAAE,aAAa,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,EAAE;gBAClD,IAAI,EAAE,aAAa,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,EAAE;aAC/C;SACF;QACD,aAAa,EAAE,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,qBAAqB,CAAC,IAAI,IAAI,CAAC;QACzE,WAAW,EAAE,YAAY;QACzB,kBAAkB;KACnB;AACH,CAAC,CAAC;;;;;;;;;;;;ACzBF,wCAA0F;AAC1F,4CAAwC;AAExC,qCAAmC;AACnC,4CAAgE;AAGzD,IAAM,sBAAsB,oCAA5B,MAAM,sBAAsB;IACjC,YAA6B,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;IAAG,CAAC;IAGjD,KAAD,CAAC,MAAM;QACV,OAAO,aAAG,EAAC,GAAG,EAAE,CACd,IAAI,CAAC,UAAU,CAAC,IAAI,CACnB,8BAAkB,CAAC,KAAK,EACvB,EAAE,CACH,CACF,CAAC;IACJ,CAAC;CAiDF;AAxDO;IADL,gBAAG,EAAC,KAAK,CAAC;;;;oDAQV;iCAXU,sBAAsB;IADlC,uBAAU,EAAC,cAAc,CAAC;iEAEgB,uBAAU,oBAAV,uBAAU;GADxC,sBAAsB,CA4DlC;;;;;;;;;;ACnED,wCAAuD;AACvD,4CAAsC;AAE/B,KAAK,UAAU,GAAG,CAAO,EAAuB;IACrD,IAAI;QACF,OAAO,MAAM,EAAE,EAAE,CAAC;KACnB;IAAC,OAAO,KAAK,EAAE;QACd,IAAI,KAAK,YAAY,qBAAQ,EAAE;YAC7B,eAAM,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;SAC5C;aAAM;YACL,eAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SACrB;QACD,MAAM,IAAI,sBAAa,CAAC,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,IAAI,GAAG,CAAC,CAAC;KAC7D;AACH,CAAC;AAXD,kBAWC;;;;;;;;;;ACdD,uDAA0C;AAG1C,uDAAwD;;;;;;;;;;;;;;;;;;AEDxD,IAAiB,kBAAkB,CASlC;AATD,WAAiB,kBAAkB;IACpB,wBAAK,GAAG,wBAAwB,CAAC;IAE9C,MAAa,OAAO;KACnB;IADY,0BAAO,UACnB;IAED,MAAa,QAAQ;QAArB;YACE,iBAAY,GAAkB,EAAE,CAAC;QACnC,CAAC;KAAA;IAFY,2BAAQ,WAEpB;AACH,CAAC,EATgB,kBAAkB,kCAAlB,kBAAkB,QASlC;;;;;;UCXD;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;ACtBA;;;GAGG;;AAEH,wCAAwC;AACxC,sCAA2C;AAE3C,4CAA6C;AAE7C,KAAK,UAAU,SAAS;IACtB,MAAM,GAAG,GAAG,MAAM,kBAAW,CAAC,MAAM,CAAC,sBAAS,CAAC,CAAC;IAChD,MAAM,YAAY,GAAG,QAAQ,CAAC;IAC9B,GAAG,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;IAClC,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC;IACtC,MAAM,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACvB,eAAM,CAAC,GAAG,CACR,0CAA0C,IAAI,IAAI,YAAY,EAAE,CACjE,CAAC;AACJ,CAAC;AAED,SAAS,EAAE,CAAC","sources":["webpack:///external commonjs \"@nestjs/common\"","webpack:///external commonjs \"@nestjs/core\"","webpack:///./src/app/app.module.ts","webpack:///external commonjs \"tslib\"","webpack:///external commonjs \"@nestjs/config\"","webpack:///external commonjs \"nestjs-rmq\"","webpack:///./src/app/config/rmq.config.ts","webpack:///./src/app/controllers/competitions.controller.ts","webpack:///./src/app/utils/res.ts","webpack:///../../libs/contracts/src/index.ts","webpack:///../../libs/contracts/src/lib/common/domain-event.ts","webpack:///../../libs/contracts/src/lib/competitions/competitions-get-all.ts","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { RMQModule } from 'nestjs-rmq';\n\nimport { getRmqConfig } from './config/rmq.config';\nimport { CompetitionsController } from './controllers/competitions.controller';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    RMQModule.forRootAsync(getRmqConfig()),\n  ],\n  controllers: [CompetitionsController],\n  providers: [],\n})\nexport class AppModule {}\n","module.exports = require(\"tslib\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"nestjs-rmq\");","import { ConfigModule, ConfigService } from '@nestjs/config';\nimport { IRMQServiceAsyncOptions, IRMQServiceOptions } from 'nestjs-rmq';\n\nexport const getRmqConfig = (): IRMQServiceAsyncOptions => ({\n  inject: [ConfigService],\n  imports: [ConfigModule],\n  useFactory: getRmqFactory,\n});\n\nconst getRmqFactory = async (\n  configService: ConfigService\n): Promise<IRMQServiceOptions> => {\n  return {\n    exchangeName: configService.get('AMQP_EXCHANGE') ?? '',\n    connections: [\n      {\n        login: configService.get('AMQP_LOGIN') ?? '',\n        password: configService.get('AMQP_PASSWORD') ?? '',\n        host: configService.get('AMQP_HOSTNAME') ?? '',\n      },\n    ],\n    prefetchCount: parseInt(configService.get('AMQP_PREFETCH_COUNT') ?? '32'),\n    serviceName: 'eSport-api',\n    // logger: Logger,\n  }\n};\n","import { Controller, Get, Param, HttpCode, HttpStatus, Post, Body } from \"@nestjs/common\";\nimport { RMQService } from \"nestjs-rmq\";\n\nimport { res } from \"../utils/res\";\nimport { CompetitionsGetAll } from \"@esport.monorepo/contracts\";\n\n@Controller('competitions')\nexport class CompetitionsController {\n  constructor(private readonly rmqService: RMQService) {}\n\n  @Get('all')\n  async getAll() {\n    return res(() =>\n      this.rmqService.send<CompetitionsGetAll.Request, CompetitionsGetAll.Response>(\n       CompetitionsGetAll.topic,\n        {}\n      )\n    );\n  }\n\n  // @Get(':id')\n  // async getById(@Param('id') _id: string) {\n  //   return res(() =>\n  //     this.rmqService.send<\n  //       CompetitionsGetById.Request,\n  //       CompetitionsGetById.Response\n  //     >(CompetitionsGetById.topic, { _id })\n  //   );\n  // }\n\n  // @Get('populated/:id')\n  // async getPopulatedById(@Param('id') _id: string) {\n  //   return res(() =>\n  //     this.rmqService.send<\n  //       CompetitionGetPopulatedById.Request,\n  //       CompetitionGetPopulatedById.Response\n  //     >(CompetitionGetPopulatedById.topic, { _id })\n  //   );\n  // }\n\n  // @HttpCode(HttpStatus.CREATED)\n  // @Post('create')\n  // async createCompetition(\n  //   @Body()\n  //   body: CreateCompetitionDto\n  // ) {\n  //   return res(() =>\n  //     this.rmqService.send<\n  //       CompetitionCreate.Request,\n  //       CompetitionCreate.Response\n  //     >(CompetitionCreate.topic, body)\n  //   );\n  // }\n\n  // @HttpCode(HttpStatus.CREATED)\n  // @Post('create-with-categories')\n  // async createCompetitionWithCategories(\n  //   @Body()\n  //   body: CompetitionCreateWithCategories.Request\n  // ) {\n  //   return res(() =>\n  //     this.rmqService.send<\n  //       CompetitionCreateWithCategories.Request,\n  //       CompetitionCreateWithCategories.Response\n  //     >(CompetitionCreateWithCategories.topic, body)\n  //   );\n  // }\n}\n","import { Logger, HttpException } from \"@nestjs/common\";\nimport { RMQError } from \"nestjs-rmq\";\n\nexport async function res<TRes>(cb: () => Promise<TRes>) {\n  try {\n    return await cb();\n  } catch (error) {\n    if (error instanceof RMQError) {\n      Logger.error(error.message, error.service);\n    } else {\n      Logger.error(error);\n    }\n    throw new HttpException(error?.message, error?.code ?? 500);\n  }\n}","export * from './lib/common/domain-event';\n\n\nexport * from './lib/competitions/competitions-get-all';","export interface IDomainEvent {\n  topic: string;\n  data: unknown;\n}","import type { Competition } from '@prisma/client';\n\nexport namespace CompetitionsGetAll {\n  export const topic = 'competitions.all.query';\n\n  export class Request {\n  }\n\n  export class Response {\n    competitions: Competition[] = [];\n  }\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\n\nimport { AppModule } from './app/app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  const globalPrefix = 'api/v1';\n  app.setGlobalPrefix(globalPrefix);\n  const port = process.env.PORT || 3002;\n  await app.listen(port);\n  Logger.log(\n    `ðŸš€ API is running on: http://localhost:${port}/${globalPrefix}`\n  );\n}\n\nbootstrap();\n"],"names":[],"sourceRoot":""}