{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///external commonjs \"@nestjs/common\"","webpack:///external commonjs \"@nestjs/core\"","webpack:///./src/app/app.module.ts","webpack:///external commonjs \"tslib\"","webpack:///external commonjs \"@nestjs/config\"","webpack:///external commonjs \"nestjs-rmq\"","webpack:///./src/config/rmq.config.ts","webpack:///./src/app/database/prisma.module.ts","webpack:///./src/app/database/prisma.service.ts","webpack:///external commonjs \"@prisma/client\"","webpack:///./src/app/competition/competition.module.ts","webpack:///./src/app/competition/competition.repository.ts","webpack:///./src/app/category/category.entity.ts","webpack:///./src/app/competition/competition.queries.ts","webpack:///../../libs/contracts/src/index.ts","webpack:///../../libs/contracts/src/lib/common/domain-event.ts","webpack:///../../libs/contracts/src/lib/competitions/competitions-get-all.ts","webpack:///./src/app/competition/competition.service.ts","webpack:///./src/app/competition/competition.entity.ts","webpack:///./src/app/competition/competition.event-emitter.ts","webpack:///./src/app/competition/competition.commands.ts","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { RMQModule } from 'nestjs-rmq';\n\nimport { getRmqConfig } from '../config/rmq.config';\n\nimport { PrismaModule } from './database/prisma.module';\nimport { CompetitionModule } from './competition/competition.module';\n\n\n@Module({\n  imports: [PrismaModule, CompetitionModule, ConfigModule.forRoot({\n    isGlobal: true,\n  }),\n  RMQModule.forRootAsync(getRmqConfig()),],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n","module.exports = require(\"tslib\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"nestjs-rmq\");","import { Logger } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { IRMQServiceAsyncOptions, IRMQServiceOptions } from 'nestjs-rmq';\n\nexport const getRmqConfig = (): IRMQServiceAsyncOptions => ({\n  inject: [ConfigService],\n  imports: [ConfigModule],\n  useFactory: getRmqFactory,\n});\n\nconst getRmqFactory = async (\n  configService: ConfigService\n): Promise<IRMQServiceOptions> => ({\n  exchangeName: configService.get('AMQP_EXCHANGE') ?? '',\n  connections: [\n    {\n      login: configService.get('AMQP_LOGIN') ?? '',\n      password: configService.get('AMQP_PASSWORD') ?? '',\n      host: configService.get('AMQP_HOSTNAME') ?? '',\n    },\n  ],\n  prefetchCount: parseInt(configService.get('AMQP_PREFETCH_COUNT') ?? '32'),\n  serviceName: 'eSport-competitions',\n  queueName: configService.get('AMQP_QUEUE'),\n  logger: Logger,\n});\n","import { Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n\n@Module({\n  imports: [],\n  controllers: [],\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n","import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}","module.exports = require(\"@prisma/client\");","import { Module } from '@nestjs/common';\n\nimport { PrismaModule } from '../database/prisma.module';\n\nimport { CompetitionRepository } from './competition.repository';\nimport { CompetitionQuery } from './competition.queries';\nimport { CompetitionService } from './competition.service';\nimport { CompetitionCommands } from './competition.commands';\nimport { CompetitionEventEmitter } from './competition.event-emitter';\n\n\n@Module({\n  imports: [PrismaModule],\n  controllers: [CompetitionQuery, CompetitionCommands],\n  providers: [CompetitionRepository, CompetitionService, CompetitionEventEmitter],\n})\nexport class CompetitionModule {}\n","import { Injectable } from \"@nestjs/common\";\n\nimport { PrismaService } from \"../database/prisma.service\";\nimport { CategoryEntity } from \"../category/category.entity\";\n\nimport { CompetitionEntity } from \"./competition.entity\";\n\n@Injectable()\nexport class CompetitionRepository {\n  constructor(private readonly prismaService: PrismaService) {}\n\n  async findAll() {\n      return this.prismaService.competition.findMany({\n          include: { \n            categories: {\n              include: {\n                  rounds: {\n                      include: {\n                        fights: {\n                          include: {\n                            round: {\n                              include: {\n                                fights: {\n                                  include: {\n                                    competitors: {\n                                      include: {\n                                        user: true\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            },\n                          }\n                        }\n                      }\n                  }\n              }\n            }\n          },\n      });\n  }\n\n  async findByOrganisationId(organisationId: number) {\n    return this.prismaService.competition.findMany({\n      where: {\n        organisationId\n      }\n    })\n  }\n\n  async create(data: CompetitionEntity) {\n    const { categories, ...competition } = data;\n    const categoryEntities = categories.map(category => new CategoryEntity(category))\n     \n    return this.prismaService.competition.create({ data: {\n      ...competition,\n    } });\n  }\n\n  async update(data: CompetitionEntity) {\n    const { categories, ...competition } = data;\n    return this.prismaService.competition.update({ where: { id: competition.id }, data: {\n        ...competition,\n      } \n    });\n  }\n}","import { Category, Round } from \"@prisma/client\";\nimport { CompetitionEntity } from \"../competition/competition.entity\";\n\nexport class CategoryEntity implements Category {\n  id: number;\n  title: string;\n  competitionId: number;\n  competition: CompetitionEntity;\n\n  rounds?: Round[];\n\n  constructor(data: Partial<CategoryEntity>) {\n    this.id = data.id;\n    this.title = data.title;\n    this.competitionId = data.competitionId;\n    this.competition = data.competition;\n    this.rounds = data.rounds;\n  }\n}","import { Controller, Get } from \"@nestjs/common\";\nimport { RMQRoute } from \"nestjs-rmq\";\nimport { CompetitionsGetAll } from \"@esport.monorepo/contracts\";\n\nimport { CompetitionService } from \"./competition.service\";\n\n@Controller()\nexport class CompetitionQuery {\n    constructor(private readonly service: CompetitionService) {}\n\n    @RMQRoute(CompetitionsGetAll.topic)\n    async findAll() {\n        return this.service.findAll();\n    }\n\n}","export * from './lib/common/domain-event';\n\n\nexport * from './lib/competitions/competitions-get-all';","export interface IDomainEvent {\n  topic: string;\n  data: unknown;\n}","import type { Competition } from '@prisma/client';\n\nexport namespace CompetitionsGetAll {\n  export const topic = 'competitions.all.query';\n\n  export class Request {\n  }\n\n  export class Response {\n    competitions: Competition[] = [];\n  }\n}","import { Injectable } from \"@nestjs/common\";\n\nimport { CompetitionRepository } from \"./competition.repository\";\nimport { CompetitionEntity } from \"./competition.entity\";\nimport { CompetitionEventEmitter } from \"./competition.event-emitter\";\n\n\n@Injectable()\nexport class CompetitionService {\n  constructor(\n    private readonly repo: CompetitionRepository, \n    private readonly eventEmitter: CompetitionEventEmitter\n  ) {}   \n  \n  async findAll() {\n    return this.repo.findAll();\n  }\n\n  async create(data: CompetitionEntity) {\n    const newCompetition = new CompetitionEntity(data);\n    const comp = await this.repo.create(newCompetition);\n    newCompetition.addEvent({\n      topic: 'competitions.competition-created.event',\n      data: { id: comp.id, name: comp.title, organisationId: comp.organisationId },\n    });\n    await this.updateCompetition(newCompetition);\n    return comp;\n  } \n\n  private async updateCompetition(comp: CompetitionEntity) {\n    return Promise.all([\n      this.eventEmitter.handle(comp),\n      this.repo.update(comp),\n    ]);\n  }\n}\n","import { Competition } from \"@prisma/client\";\nimport { CategoryEntity } from \"../category/category.entity\";\nimport { IDomainEvent } from \"@esport.monorepo/contracts\";\n\n\nexport class CompetitionEntity implements Competition {\n  id: number;\n  title: string;\n  dateStart: Date;\n  dateEnd: Date;\n  organisationId: number;\n\n  categories?: CategoryEntity[];\n\n  events: IDomainEvent[] = [];\n  \n  constructor(partial: Partial<CompetitionEntity>) {\n    this.id = partial.id;\n    this.title = partial.title;\n    this.dateStart = this.updateDate(partial.dateStart);\n    this.dateEnd = this.updateDate(partial.dateEnd);\n    this.organisationId = partial.organisationId;\n    this.categories = partial.categories;\n  }\n\n  updateDate(date?: Date | string) {\n    if (date) {\n      return new Date(date);\n    }\n  }\n  \n  addEvent(event: IDomainEvent) {\n    this.events.push(event);\n    return this;\n  }\n}","import { Controller, Injectable } from \"@nestjs/common\";\nimport { RMQService } from \"nestjs-rmq\";\n\nimport { CompetitionEntity } from \"./competition.entity\";\n\n@Injectable()\nexport class CompetitionEventEmitter {\n  constructor(private readonly rmqService: RMQService) {}\n\n  async handle(eventEntity: CompetitionEntity) {\n    for (const { data, topic } of eventEntity.events) {\n      await this.rmqService.notify(topic, data, {\n        persistent: true,\n      });\n    }\n  }\n}","import { Controller } from \"@nestjs/common\";\nimport { RMQRoute } from \"nestjs-rmq\";\n\nimport { CompetitionService } from \"./competition.service\";\nimport { CompetitionEntity } from \"./competition.entity\";\n\n@Controller()\nexport class CompetitionCommands {\n    constructor(private readonly competitionService: CompetitionService) {}\n\n  @RMQRoute('competitions.create')\n  async create(data: CompetitionEntity) {\n    return this.competitionService.create(data);\n  }\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\n\nimport { AppModule } from './app/app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.init();\n  Logger.log(`🚀 Competitions is running`);\n}\n\nbootstrap();\n"],"names":[],"sourceRoot":""}