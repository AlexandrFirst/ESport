// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Competition {
  id                    Int          @id @default(autoincrement())
  title                 String
  dateStart             DateTime
  dateEnd               DateTime?
  organisation          Organisation @relation(fields: [organisationId], references: [id])
  organisationId        Int
  categories            Category[]
  registrationCloseDate DateTime
  createdBy             Int
  creator               User         @relation(fields: [createdBy], references: [id])
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  address               String
  requests               Request[]
}

model Category {
  id            Int         @id @default(autoincrement())
  title         String
  competition   Competition @relation(fields: [competitionId], references: [id])
  competitionId Int
  rounds        Round[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Round {
  id         Int       @id @default(autoincrement())
  title      String?
  roundNum   Int
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
  fights     Fight[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Fight {
  id          Int          @id @default(autoincrement())
  isProceed   Boolean      @default(false)
  fightNumber Int
  competitors Competitor[]
  round       Round?       @relation(fields: [roundId], references: [id])
  roundId     Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Competitor {
  id             Int       @id @default(autoincrement())
  name           String
  user           User?     @relation(fields: [userId], references: [id])
  userId         Int?
  fight          Fight?    @relation(fields: [fightId], references: [id])
  fightId        Int?
  competitorType String
  level          Int
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  requests       Request[]
  height         Int?
  weight         Int?
}

model User {
  id                  Int           @id @default(autoincrement())
  name                String
  competitors         Competitor[]
  createdCompetitions Competition[]
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

model Request {
  id            Int         @id @default(autoincrement())
  competitor    Competitor  @relation(fields: [competitorId], references: [id])
  competitorId  Int
  competition   Competition @relation(fields: [competitionId], references: [id])
  competitionId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  isAccepted    Boolean     @default(false)
}

// enum CompetitorType {
//   Male
//   Female
// }

model Organisation {
  id           Int           @id @default(autoincrement())
  name         String
  competitions Competition[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}
