version: '3.9'
services:
  sqldb:
    image: mcr.microsoft.com/mssql/server:2019-latest
    platform: linux
    user: root
    environment:
      - SA_PASSWORD=2Secure*Password2
      - ACCEPT_EULA=Y
    healthcheck:
      test: ["CMD", "/opt/mssql-tools/bin/sqlcmd", "-Usa", "-P2Secure*Password2", "-Q", "select 1"]
      interval: 2s
      retries: 20
    ports:
      - '1450:1433'
    volumes:
      - "./db_volume/_data:/var/opt/mssql/data"
      - "./db_volume/_log:/var/opt/mssql/log"
      - "./db_volume/_log:/var/opt/mssql/secrets"
    extra_hosts:
      - "host.docker.internal:host-gateway"
  rabbit:
    image: rabbitmq:3-management
    user: root
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=pass
    restart: on-failure
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      retries: 3
    ports:
      - '15672:15672'
      - '5672:5672'
    extra_hosts:
    - "host.docker.internal:host-gateway"
  kurrento:
    image: kurento/kurento-media-server:6.18.0
    user: root
    container_name: kurento
    restart: on-failure
    environment:
      - KMS_MIN_PORT=5000
      - KMS_MAX_PORT=5050
      - KMS_ICE_TCP=1
      - KMS_TURN_URL=e76b1e18382eb8485e4ced0f:awmeGuNs0IsK0VkM@216.39.253.11:80
      - GST_DEBUG="${GST_DEBUG:-2},KurentoUriEndpointImpl:5,uriendpoint:5,playerendpoint:5,kmselement:5,appsrc:4,agnosticbin*:5,uridecodebin:6,rtspsrc:6,souphttpsrc:5,GST_URI:6,*CAPS*:3"
    ports:
      - '8888:8888'
    volumes:
      - ./records:/tmp
    extra_hosts:
      - "host.docker.internal:host-gateway"
  identity:
    image: 12345flex402/esport_identity
    build:
      context: ./IdentityV2
      dockerfile: ./Dockerfile
    depends_on:
      sqldb:
        condition: service_healthy
      rabbit:
        condition: service_healthy
    restart: on-failure
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    ports:
      - '5000:80'
    extra_hosts:
    - "host.docker.internal:host-gateway"
  gateway:
    image: 12345flex402/esport-gateway
    user: root
    build:
      context: .
      dockerfile: Gateway.Dockerfile
    depends_on:
      - identity
    restart: on-failure
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    ports:
      - '5001:80'
    extra_hosts:
      - "host.docker.internal:host-gateway"
  message:
    image: 12345flex402/esport-message-service
    user: root
    build:
      context: ./MessageService
      dockerfile: ./Dockerfile
    depends_on:
      rabbit:
        condition: service_healthy
    restart: on-failure
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    ports:
      - '5003:80'
    extra_hosts:
      - "host.docker.internal:host-gateway"
  stream:
    image: 12345flex402/esport-stream-service
    user: root
    build:
      context: ./
      dockerfile: ./StreamService.Dockerfile
    depends_on:
      - kurrento
      - sqldb
      - api-gateway
      - identity
    restart: on-failure
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    ports:
      - '5004:80'
    extra_hosts:
      - "host.docker.internal:host-gateway"
  web:
    image: 12345flex402/esport-web
    user: root
    container_name: esport-web
    build:
      context: ./esport.ui
      dockerfile: ./Dockerfile
    restart: on-failure
    ports:
      - '3000:3000'
  stream-ui:
    image: 12345flex402/esport-stream-ui
    container_name: stream-ui
    build:
      context: ./esport.stream.ui
      dockerfile: ./Dockerfile
    restart: on-failure
    ports:
      - '4200:443'
  competitions:
    image: 12345flex402/esport-competitions
    user: root
    container_name: esport-competitions
    build:
      context: ./esport.competitions
      dockerfile: ./Dockerfile
    restart: on-failure
    volumes:
      - /usr/src/app/node_modules
      - ./esport.competitions:/usr/src/app
    command: npm run start
    env_file:
      - ./esport.competitions/.env.production
    depends_on:
      - rabbit
      - api-gateway
  api-gateway:
    image: 12345flex402/esport-gateway-ts
    user: root
    build:
      context: ./esport.api.gateway
      dockerfile: ./Dockerfile
    container_name: esport-api-gateway
    restart: on-failure
    volumes:
      - /usr/src/app/node_modules
      - ./esport.api.gateway:/usr/src/app
    command: npm run start
    env_file:
      - ./esport.api.gateway/.env.production
    depends_on:
      - rabbit
    ports:
      - '3001:3001'
