// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserWorkflow.Esport;

#nullable disable

namespace UserWorkflow.Esport.Migrations
{
    [DbContext(typeof(EsportDataContext))]
    [Migration("20230522122655_trainer email config fix")]
    partial class traineremailconfigfix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("UserWorkflow.Esport.Models.Administrators", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsProfileConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PhotoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelephoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Administrators");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.AnswerBodyParts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AnswerId")
                        .HasColumnType("int");

                    b.Property<int>("BodyPartId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsPositive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("BodyPartId");

                    b.ToTable("AnswerBodyParts");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.Answers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.AnswerSport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AnswerId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsPositive")
                        .HasColumnType("bit");

                    b.Property<int>("SportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("SportId");

                    b.ToTable("AnswerSports");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.AnswerTraumas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AnswerId")
                        .HasColumnType("int");

                    b.Property<int>("TraumaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("TraumaId");

                    b.ToTable("AnswerTraumas");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.BodyParts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BodyParts");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AgeLimit")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExerciseOwnerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseOwnerId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.ExerciseBodyPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BodyPartId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BodyPartId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("ExerciseBodyParts");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.ExerciseSport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("SportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("SportId");

                    b.ToTable("ExerciseSports");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.ExerciseTraumas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("TraumaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("TraumaId");

                    b.ToTable("ExerciseTraumas");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.ExerciseTutorial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.ToTable("ExerciseTutorials");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("Caloric")
                        .HasColumnType("real");

                    b.Property<float>("Carbohydrates")
                        .HasColumnType("real");

                    b.Property<float>("Fats")
                        .HasColumnType("real");

                    b.Property<float>("Proteins")
                        .HasColumnType("real");

                    b.Property<float>("Water")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.Food_FoodDiet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DietId")
                        .HasColumnType("int");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DietId");

                    b.HasIndex("FoodId");

                    b.ToTable("Food_FoodDiets");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.FoodDiet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TrainerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainerId");

                    b.ToTable("FoodDiets");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.Gym", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("CloseTime")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("OpenTime")
                        .HasColumnType("time");

                    b.Property<int?>("OrganisationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Gyms");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.GymAdministrators", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AdministratorId")
                        .HasColumnType("int");

                    b.Property<int>("GymId")
                        .HasColumnType("int");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AdministratorId");

                    b.HasIndex("GymId");

                    b.ToTable("GymAdministrators");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.GymShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DayOfTheWeeks")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("FromTime")
                        .HasColumnType("time");

                    b.Property<int>("GymId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ToTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("GymId");

                    b.ToTable("GymShifts");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DayOfTheWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("FromTime")
                        .HasColumnType("time");

                    b.Property<int>("LessonType")
                        .HasColumnType("int");

                    b.Property<bool>("OverrideTrainerShedule")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("ToTime")
                        .HasColumnType("time");

                    b.Property<int>("TrainerSheduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainerSheduleId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.Lesson_FoodDiet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FoodDietId")
                        .HasColumnType("int");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FoodDietId");

                    b.HasIndex("LessonId");

                    b.ToTable("Lesson_FoodsDiets");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.Organisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.OrganisationAdministrators", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProfileConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<Guid?>("PhotoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelephoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("OrganisationId");

                    b.ToTable("OrganisationAdministrators");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("QuestionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.Sport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Sports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Suitable for everyone",
                            Name = "Swimming",
                            Type = 2
                        },
                        new
                        {
                            Id = 2,
                            Description = "Suitable for everyone",
                            Name = "Karate",
                            Type = 0
                        },
                        new
                        {
                            Id = 3,
                            Description = "Suitable for everyone",
                            Name = "Powerlifting",
                            Type = 2
                        },
                        new
                        {
                            Id = 4,
                            Description = "Suitable for everyone",
                            Name = "Car racing",
                            Type = 1
                        },
                        new
                        {
                            Id = 5,
                            Description = "Suitable for everyone",
                            Name = "Football",
                            Type = 1
                        },
                        new
                        {
                            Id = 6,
                            Description = "Suitable for everyone",
                            Name = "Basketball",
                            Type = 1
                        });
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.Trainee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsProfileConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PhotoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelephoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Trainees");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.TraineeAnswers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AnswerId")
                        .HasColumnType("int");

                    b.Property<int>("TraineeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("TraineeId");

                    b.ToTable("TraineeAnswers");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.TraineeExercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DescriptionOverride")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("ExerciseStatus")
                        .HasColumnType("int");

                    b.Property<int>("ExerciseType")
                        .HasColumnType("int");

                    b.Property<bool>("IsRecommended")
                        .HasColumnType("bit");

                    b.Property<string>("StatusReason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.ToTable("TraineeExercises");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.TraineeShedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsPending")
                        .HasColumnType("bit");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("TraineeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("TraineeId");

                    b.ToTable("TraineeShedules");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.TraineeSheduleTraineeExercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("TraineeExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("TraineeSheduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TraineeExerciseId");

                    b.HasIndex("TraineeSheduleId");

                    b.ToTable("TraineeSheduleTraineeExercises");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.Trainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsProfileConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PhotoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelephoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Trainers");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.TrainerRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrainerSheduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainerSheduleId");

                    b.ToTable("TrainerRequests");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.TrainerResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ApplicationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.Property<int>("TrainerRequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainerId");

                    b.HasIndex("TrainerRequestId");

                    b.ToTable("TrainerResponses");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.TrainerShedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ShiftId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TimeOverride")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TrainerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShiftId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerShedules");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.TrainerSport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SportId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SportId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerSports");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.Traumas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BodyPart")
                        .HasColumnType("int");

                    b.Property<int>("Description")
                        .HasColumnType("int");

                    b.Property<string>("HealDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Traumas");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.AnswerBodyParts", b =>
                {
                    b.HasOne("UserWorkflow.Esport.Models.Answers", "Answers")
                        .WithMany("AnswerBodyParts")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserWorkflow.Esport.Models.BodyParts", "BodyParts")
                        .WithMany("AnswerBodyParts")
                        .HasForeignKey("BodyPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answers");

                    b.Navigation("BodyParts");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.Answers", b =>
                {
                    b.HasOne("UserWorkflow.Esport.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.AnswerSport", b =>
                {
                    b.HasOne("UserWorkflow.Esport.Models.Answers", "Answers")
                        .WithMany("AnswerSports")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserWorkflow.Esport.Models.Sport", "Sport")
                        .WithMany("AnswerSports")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answers");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.AnswerTraumas", b =>
                {
                    b.HasOne("UserWorkflow.Esport.Models.Answers", "Answers")
                        .WithMany("AnswerTraumas")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserWorkflow.Esport.Models.Traumas", "Traumas")
                        .WithMany("AnswerTraumas")
                        .HasForeignKey("TraumaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answers");

                    b.Navigation("Traumas");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.Exercise", b =>
                {
                    b.HasOne("UserWorkflow.Esport.Models.Trainer", "ExerciseOwner")
                        .WithMany("Exercise")
                        .HasForeignKey("ExerciseOwnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ExerciseOwner");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.ExerciseBodyPart", b =>
                {
                    b.HasOne("UserWorkflow.Esport.Models.BodyParts", "BodyParts")
                        .WithMany("ExerciseBodyParts")
                        .HasForeignKey("BodyPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserWorkflow.Esport.Models.Exercise", "Exercise")
                        .WithMany("BodyParts")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BodyParts");

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.ExerciseSport", b =>
                {
                    b.HasOne("UserWorkflow.Esport.Models.Exercise", "Exercise")
                        .WithMany("ExerciseSports")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserWorkflow.Esport.Models.Sport", "Sport")
                        .WithMany("ExerciseSports")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.ExerciseTraumas", b =>
                {
                    b.HasOne("UserWorkflow.Esport.Models.Exercise", "Exercise")
                        .WithMany("ExerciseTraumas")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserWorkflow.Esport.Models.Traumas", "Traumas")
                        .WithMany("ExerciseTraumas")
                        .HasForeignKey("TraumaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Traumas");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.ExerciseTutorial", b =>
                {
                    b.HasOne("UserWorkflow.Esport.Models.Exercise", "Exercise")
                        .WithMany("ExerciseTutorails")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.Food_FoodDiet", b =>
                {
                    b.HasOne("UserWorkflow.Esport.Models.FoodDiet", "FoodDiet")
                        .WithMany("Food_FoodDiets")
                        .HasForeignKey("DietId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserWorkflow.Esport.Models.Food", "Food")
                        .WithMany("FoodDiets")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("FoodDiet");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.FoodDiet", b =>
                {
                    b.HasOne("UserWorkflow.Esport.Models.Trainer", "Trainer")
                        .WithMany("FoodDiets")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.Gym", b =>
                {
                    b.HasOne("UserWorkflow.Esport.Models.Organisation", "Organisation")
                        .WithMany("Gyms")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.GymAdministrators", b =>
                {
                    b.HasOne("UserWorkflow.Esport.Models.Administrators", "Administrators")
                        .WithMany("GymAdministrators")
                        .HasForeignKey("AdministratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserWorkflow.Esport.Models.Gym", "Gym")
                        .WithMany("GymAdministrators")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Administrators");

                    b.Navigation("Gym");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.GymShift", b =>
                {
                    b.HasOne("UserWorkflow.Esport.Models.Gym", "Gym")
                        .WithMany("GymShifts")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gym");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.Lesson", b =>
                {
                    b.HasOne("UserWorkflow.Esport.Models.TrainerShedule", "TrainerShedule")
                        .WithMany("Lessons")
                        .HasForeignKey("TrainerSheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainerShedule");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.Lesson_FoodDiet", b =>
                {
                    b.HasOne("UserWorkflow.Esport.Models.FoodDiet", "FoodDiet")
                        .WithMany("LessonFoodDiets")
                        .HasForeignKey("FoodDietId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserWorkflow.Esport.Models.Lesson", "Lesson")
                        .WithMany("LessonFoodDiets")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodDiet");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.OrganisationAdministrators", b =>
                {
                    b.HasOne("UserWorkflow.Esport.Models.Organisation", "Organisation")
                        .WithMany("OrganisationAdministrators")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.TraineeAnswers", b =>
                {
                    b.HasOne("UserWorkflow.Esport.Models.Answers", "Answers")
                        .WithMany("TraineeAnswers")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserWorkflow.Esport.Models.Trainee", "Trainee")
                        .WithMany("TraineeAnswers")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answers");

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.TraineeExercise", b =>
                {
                    b.HasOne("UserWorkflow.Esport.Models.Exercise", "Exercise")
                        .WithMany("TraineeExercises")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.TraineeShedule", b =>
                {
                    b.HasOne("UserWorkflow.Esport.Models.Lesson", "Lesson")
                        .WithMany("TraineeShedules")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserWorkflow.Esport.Models.Trainee", "Trainee")
                        .WithMany("TraineeShedules")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.TraineeSheduleTraineeExercise", b =>
                {
                    b.HasOne("UserWorkflow.Esport.Models.TraineeExercise", "TraineeExercise")
                        .WithMany("TraineeSheduleExercises")
                        .HasForeignKey("TraineeExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserWorkflow.Esport.Models.TraineeShedule", "TraineeShedule")
                        .WithMany("TraineeSheduleExercises")
                        .HasForeignKey("TraineeSheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TraineeExercise");

                    b.Navigation("TraineeShedule");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.TrainerRequest", b =>
                {
                    b.HasOne("UserWorkflow.Esport.Models.TrainerShedule", "TrainerShedule")
                        .WithMany("TrainerRequests")
                        .HasForeignKey("TrainerSheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainerShedule");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.TrainerResponse", b =>
                {
                    b.HasOne("UserWorkflow.Esport.Models.Trainer", "Trainer")
                        .WithMany("TrainerResponses")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UserWorkflow.Esport.Models.TrainerRequest", "TrainerRequest")
                        .WithMany("TrainerResponses")
                        .HasForeignKey("TrainerRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trainer");

                    b.Navigation("TrainerRequest");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.TrainerShedule", b =>
                {
                    b.HasOne("UserWorkflow.Esport.Models.GymShift", "GymShift")
                        .WithMany("TrainerShedules")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserWorkflow.Esport.Models.Trainer", "Trainer")
                        .WithMany("TraineeShedules")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("GymShift");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.TrainerSport", b =>
                {
                    b.HasOne("UserWorkflow.Esport.Models.Sport", "Sport")
                        .WithMany("TrainerSports")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserWorkflow.Esport.Models.Trainer", "Trainer")
                        .WithMany("TrainerSports")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sport");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.Administrators", b =>
                {
                    b.Navigation("GymAdministrators");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.Answers", b =>
                {
                    b.Navigation("AnswerBodyParts");

                    b.Navigation("AnswerSports");

                    b.Navigation("AnswerTraumas");

                    b.Navigation("TraineeAnswers");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.BodyParts", b =>
                {
                    b.Navigation("AnswerBodyParts");

                    b.Navigation("ExerciseBodyParts");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.Exercise", b =>
                {
                    b.Navigation("BodyParts");

                    b.Navigation("ExerciseSports");

                    b.Navigation("ExerciseTraumas");

                    b.Navigation("ExerciseTutorails");

                    b.Navigation("TraineeExercises");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.Food", b =>
                {
                    b.Navigation("FoodDiets");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.FoodDiet", b =>
                {
                    b.Navigation("Food_FoodDiets");

                    b.Navigation("LessonFoodDiets");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.Gym", b =>
                {
                    b.Navigation("GymAdministrators");

                    b.Navigation("GymShifts");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.GymShift", b =>
                {
                    b.Navigation("TrainerShedules");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.Lesson", b =>
                {
                    b.Navigation("LessonFoodDiets");

                    b.Navigation("TraineeShedules");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.Organisation", b =>
                {
                    b.Navigation("Gyms");

                    b.Navigation("OrganisationAdministrators");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.Sport", b =>
                {
                    b.Navigation("AnswerSports");

                    b.Navigation("ExerciseSports");

                    b.Navigation("TrainerSports");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.Trainee", b =>
                {
                    b.Navigation("TraineeAnswers");

                    b.Navigation("TraineeShedules");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.TraineeExercise", b =>
                {
                    b.Navigation("TraineeSheduleExercises");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.TraineeShedule", b =>
                {
                    b.Navigation("TraineeSheduleExercises");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.Trainer", b =>
                {
                    b.Navigation("Exercise");

                    b.Navigation("FoodDiets");

                    b.Navigation("TraineeShedules");

                    b.Navigation("TrainerResponses");

                    b.Navigation("TrainerSports");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.TrainerRequest", b =>
                {
                    b.Navigation("TrainerResponses");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.TrainerShedule", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("TrainerRequests");
                });

            modelBuilder.Entity("UserWorkflow.Esport.Models.Traumas", b =>
                {
                    b.Navigation("AnswerTraumas");

                    b.Navigation("ExerciseTraumas");
                });
#pragma warning restore 612, 618
        }
    }
}
